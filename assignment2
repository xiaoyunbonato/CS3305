#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

// Written by Xiaoyun Bonato

int main(int argc, char **argv)
{

    // If the user does not pass the arguments argv[0], argv[1], argv[2], and argv[3] (X, Y and Z), the program will terminate
    if (argc != 4)
    {
        printf("Invalid arguments\n");
        exit(0);
    }

    int status;
    int port[2];
    char userx[100];
    char X[20];
    char Y[20];
    char Z[20];
    pid_t pid;

    status = pipe(port); // Creating the pipe
    pid = fork();        // Creating the child process

    // In the Parent
    if (pid > 0)
    {
        printf("Parent (PID %d) created a child (PID %d)\n", getpid(), pid);

        strcpy(X, argv[1]);
        printf("Parent (PID %d) receives X = \"%s\" from the user\n", getpid(), X);

        write(port[1], X, 20);
        close(port[1]);
        printf("Parent (PID %d) writes X = \"%s\" from the user\n", getpid(), X);

        // Waiting until child process finishes
        wait(NULL);

        // Reading concatenated results from the pipe
        read(port[0], X, 20);
        close(port[0]);
        printf("Parent (PID %d) reads concatenated results from the pipe Z' = \"%s\" from the user\n", getpid(), X);
    }

    if (pid == 0)
    { // in the child
        strcpy(X, argv[1]);
        strcpy(Y, argv[2]);
        strcpy(Z, argv[3]);
        char buff[50];

        printf("Child (PID %d) receives Y = \"%s\" and Z = \"%s\" from the user\n", getpid(), Y, Z);

        // Adding spaces in strcat()

        size_t length = strlen(Y);
        Y[length] = ' ';
        Y[length + 1] = '\0';
        strcat(Y, Z);
        printf("Child (PID %d) concatenates Y and Z to generate Y = \"%s\"\n", getpid(), Y);

        // Reading X from pipe
        read(port[0], X, 20);
        close(port[0]);
        printf("Child (PID %d) reads X from pipe\n", getpid());

        // Concatenating X and Y to generate Z
        strcat(X, Y);
        printf("Child (PID %d) concatenates X and Y to generate Z'= \"%s\"\n", getpid(), X);

        // Writing Z' into the pipeline
        write(port[1], X, 20);
        printf("Child (PID %d) writes Z' into the pipe\n", getpid());
    }
    return 0;
}